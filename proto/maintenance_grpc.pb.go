// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaintenanceClient is the client API for Maintenance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceClient interface {
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (Maintenance_BackupClient, error)
}

type maintenanceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceClient(cc grpc.ClientConnInterface) MaintenanceClient {
	return &maintenanceClient{cc}
}

func (c *maintenanceClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (Maintenance_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Maintenance_ServiceDesc.Streams[0], "/maintenance.v1.Maintenance/Backup", opts...)
	if err != nil {
		return nil, err
	}
	x := &maintenanceBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Maintenance_BackupClient interface {
	Recv() (*SnapshotChunk, error)
	grpc.ClientStream
}

type maintenanceBackupClient struct {
	grpc.ClientStream
}

func (x *maintenanceBackupClient) Recv() (*SnapshotChunk, error) {
	m := new(SnapshotChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaintenanceServer is the server API for Maintenance service.
// All implementations must embed UnimplementedMaintenanceServer
// for forward compatibility
type MaintenanceServer interface {
	Backup(*BackupRequest, Maintenance_BackupServer) error
	mustEmbedUnimplementedMaintenanceServer()
}

// UnimplementedMaintenanceServer must be embedded to have forward compatible implementations.
type UnimplementedMaintenanceServer struct {
}

func (UnimplementedMaintenanceServer) Backup(*BackupRequest, Maintenance_BackupServer) error {
	return status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedMaintenanceServer) mustEmbedUnimplementedMaintenanceServer() {}

// UnsafeMaintenanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServer will
// result in compilation errors.
type UnsafeMaintenanceServer interface {
	mustEmbedUnimplementedMaintenanceServer()
}

func RegisterMaintenanceServer(s grpc.ServiceRegistrar, srv MaintenanceServer) {
	s.RegisterService(&Maintenance_ServiceDesc, srv)
}

func _Maintenance_Backup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaintenanceServer).Backup(m, &maintenanceBackupServer{stream})
}

type Maintenance_BackupServer interface {
	Send(*SnapshotChunk) error
	grpc.ServerStream
}

type maintenanceBackupServer struct {
	grpc.ServerStream
}

func (x *maintenanceBackupServer) Send(m *SnapshotChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Maintenance_ServiceDesc is the grpc.ServiceDesc for Maintenance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Maintenance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maintenance.v1.Maintenance",
	HandlerType: (*MaintenanceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Backup",
			Handler:       _Maintenance_Backup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "maintenance.proto",
}
