apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "meta.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "meta.name" . }}
    chart: {{ template "meta.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    team: {{ .Values.team }}
    version: {{ .Values.image.tag | quote }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "meta.name" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "meta.name" . }}
  template:
    metadata:
      labels:
        app: {{ template "meta.name" . }}
        release: {{ .Release.Name }}
        version: {{ .Values.image.tag | quote }}
        logging/cluster-flow: wandera-json
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: {{ .Values.safeToEvict | quote }}
    spec:
      serviceAccountName: {{ template "meta.name" . }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      containers:
      - name: {{ template "meta.name" . }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- if .Values.maintenance.token }}
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "meta.name" . }}-maintenance-token
              key: token
        {{- end }}
        command:
        - "bash"
        - "-c"
        - >-
          NODE_ID=$(expr $(echo "${POD_NAME: -1}") + 1) &&
          regatta {{ .Values.mode }} \
            --api.address=0.0.0.0:{{ .Values.internalPort }} \
            --api.cert-filename=/cert/tls.crt \
            --api.key-filename=/cert/tls.key \
            --rest.address=0.0.0.0:{{ .Values.metricsPort }} \
            --raft.address=$(POD_NAME).{{ template "meta.name" . }}.{{ .Release.Namespace }}.svc.cluster.local:5012 \
            --raft.listen-address=0.0.0.0:5012 \
            --raft.node-id=${NODE_ID} \
            --raft.node-host-dir=/data/raft \
            --raft.initial-members={{ .Values.raft.initialMembers }} \
            --raft.state-machine-dir=/data/state-machine \
            --raft.rtt={{ .Values.raft.rtt }} \
            --raft.election-rtt={{ .Values.raft.electionRTT }} \
            --raft.heartbeat-rtt={{ .Values.raft.heartbeatRTT }} \
            --raft.snapshot-entries={{ .Values.raft.snapshotEntries | int64 }} \
            --raft.compaction-overhead={{ .Values.raft.compactionOverhead | int64 }} \
            --storage.block-cache-size={{ .Values.storage.blockCacheSize | int64 }} \
          {{- if .Values.reflectionAPI.enabled }}
            --api.reflection-api \
          {{- end }}
          {{- if eq .Values.mode "leader" }}
            --tables.names={{ .Values.tables.names }} \
            --replication.enabled={{ .Values.replication.server.enabled }} \
            --replication.address=0.0.0.0:{{ .Values.replication.server.port }} \
          {{- if .Values.kafka.enabled }}
            --kafka.brokers={{ .Values.kafka.brokers }} \
            --kafka.check-topics={{ .Values.kafka.checkTopics }} \
            --kafka.timeout={{ .Values.kafka.dialerTimeout }} \
            --kafka.group-id={{ .Values.kafka.groupID }} \
            --kafka.topics={{ .Values.kafka.topics }} \
            --kafka.tls={{ .Values.kafka.tls }} \
            --kafka.server-cert-filename=/kafka-cert/ca.crt \
            --kafka.client-cert-filename=/kafka-cert/tls.crt \
            --kafka.client-key-filename=/kafka-cert/tls.key \
          {{- end }}
          {{- end }}
          {{- if eq .Values.mode "follower" }}
            --replication.leader-address={{ .Values.replication.leaderAddress }} \
            --replication.max-snapshot-recv-bytes-per-second={{ .Values.replication.maxSnapshotRecvBytesPerSecond | int64 }} \
            --replication.log-rpc-timeout={{ .Values.replication.logRpcTimeout }} \
          {{- end }}
            --maintenance.enabled={{ .Values.maintenance.server.enabled }} \
          {{- if .Values.maintenance.token }}
            --maintenance.token=$(TOKEN) \
          {{- end }}
            --maintenance.address=0.0.0.0:{{ .Values.maintenance.server.port }} \
            --maintenance.cert-filename=/maintenance-cert/tls.crt \
            --maintenance.key-filename=/maintenance-cert/tls.key \
            --replication.cert-filename=/replication-cert/tls.crt \
            --replication.key-filename=/replication-cert/tls.key \
            --replication.ca-filename=/replication-cert/ca.crt
        ports:
        - name: https
          containerPort: {{ .Values.internalPort }}
        - name: http-metrics
          containerPort: {{ .Values.metricsPort }}
        {{- if and .Values.replication.server.enabled (eq .Values.mode "leader") }}
        - name: https-repl
          containerPort: {{ .Values.replication.server.port }}
        {{- end }}
        {{- if .Values.maintenance.server.enabled }}
        - name: https-mainten
          containerPort: {{ .Values.maintenance.server.port }}
        {{- end }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.metricsPort }}
          initialDelaySeconds: 90
          periodSeconds: 60
        volumeMounts:
        - mountPath: /dragonboat-soft-settings.json
          name: config
          subPath: dragonboat-soft-settings.json
        - mountPath: /cert
          name: cert
        {{- if ne .Values.kafka.serverCert ""}}
        - mountPath: /kafka-cert
          name: kafka-cert
        {{- end }}
        - mountPath: /replication-cert
          name: replication-cert
        {{- if .Values.maintenance.server.enabled }}
        - mountPath: /maintenance-cert
          name: maintenance-cert
        {{- end }}
        - mountPath: /data
          name: data
      volumes:
      - name: config
        configMap:
          name: {{ template "meta.name" . }}-config
      - name: cert
        secret:
          defaultMode: 420
          secretName: {{ template "meta.name" . }}-cert
      {{- if ne .Values.kafka.serverCert ""}}
      - name: kafka-cert
        secret:
          defaultMode: 420
          secretName: {{ template "meta.name" . }}-kafka-cert
      {{- end }}
      - name: replication-cert
        secret:
          defaultMode: 420
          secretName: {{ template "meta.name" . }}-replication-cert
      {{- if .Values.maintenance.server.enabled }}
      - name: maintenance-cert
        secret:
          defaultMode: 420
          secretName: {{ template "meta.name" . }}-maintenance-cert
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- toYaml .Values.tolerations | nindent 6 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{ if .Values.affinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: {{ .Values.affinity.podAntiAffinity.topologyKey }}
            labelSelector:
              matchLabels:
                app: {{ template "meta.name" . }}
                release: {{ .Release.Name }}
      {{- end }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
    {{ .Values.persistence.storage | toYaml | nindent 6 }}
