name: Test

on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  unit:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - name: Install tparse
      run: go install github.com/mfridman/tparse@v0.13.3
    - name: Test
      run: |
        set -o pipefail && go test -json -cover ./... -coverprofile coverage.out -coverpkg ./log/...,./pebble/...,./raft/...,./regattaserver/...,./replication/...,./storage/...,./security/...,./util/... | tparse -all
    - name: Coverage track
      uses: coverallsapp/github-action@v2
      with:
        format: golang
        file: coverage.out
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,event=branch,prefix=master-
    - name: Docker build
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
  vulncheck:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Go
      uses: actions/setup-go@v5
      id: go-version
      with:
        cache: false
        go-version-file: go.mod
    - name: Scan for Vulnerabilities in Code
      uses: wandera/govulncheck-action@v1.0.0
      with:
        go-version: ${{ steps.go-version.outputs.go-version }}
        package: ./...
